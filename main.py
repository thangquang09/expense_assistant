#!/usr/bin/env python3
"""
Expense Tracker Assistant - CLI + Interactive Mode
Usage:
  python main.py                          # Interactive mode
  python main.py -a "tr∆∞a ƒÉn ph·ªü 30k"     # Quick add expense
  python main.py --append "..."           # Quick add expense
  python main.py -sd                      # Statistics daily
  python main.py -sw                      # Statistics weekly  
  python main.py -sm                      # Statistics monthly
"""

import sys
import argparse
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich import box
from chatbot import ExpenseChatbot
from expense_tracker import ExpenseTracker


def create_parser():
    """T·∫°o argument parser cho CLI"""
    parser = argparse.ArgumentParser(
        description="ü§ñ Expense Tracker Assistant",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  %(prog)s                              # Interactive mode
  %(prog)s -a "tr∆∞a ƒÉn ph·ªü 30k"         # Quick add expense
  %(prog)s --append "s√°ng u·ªëng c√† ph√™ 25k"
  %(prog)s -d "x√≥a ph·ªü"                 # Quick delete transaction
  %(prog)s -d                           # Delete most recent transaction
  %(prog)s --delete "x√≥a ph·ªü 30k"       # Delete with specific price
  %(prog)s -sd                          # Today's statistics
  %(prog)s -sw                          # This week's statistics
  %(prog)s -sm                          # This month's statistics
        """
    )
    
    # Quick operations group
    group = parser.add_mutually_exclusive_group()
    
    group.add_argument(
        '-a', '--append',
        metavar='EXPENSE',
        help='Quickly add an expense (e.g., "tr∆∞a ƒÉn ph·ªü 30k")'
    )
    
    group.add_argument(
        '-d', '--delete',
        metavar='DELETE_QUERY',
        nargs='?',  # Make argument optional
        const='x√≥a',  # Default value when -d is used without argument
        help='Quickly delete a transaction (e.g., "x√≥a ph·ªü", "x√≥a ph·ªü 30k", or just -d to delete most recent)'
    )
    
    group.add_argument(
        '-sd', '--stats-daily',
        action='store_true',
        help='Show today\'s spending statistics'
    )
    
    group.add_argument(
        '-sw', '--stats-weekly', 
        action='store_true',
        help='Show this week\'s spending statistics'
    )
    
    group.add_argument(
        '-sm', '--stats-monthly',
        action='store_true', 
        help='Show this month\'s spending statistics'
    )
    
    return parser


def quick_delete_transaction(delete_query: str):
    """X√≥a transaction nhanh t·ª´ command line"""
    console = Console()
    tracker = ExpenseTracker()
    
    # X·ª≠ l√Ω tr∆∞·ªùng h·ª£p empty string ho·∫∑c ch·ªâ c√≥ whitespace
    if not delete_query.strip():
        delete_query = "x√≥a"  # Convert empty to "x√≥a" keyword
        console.print("[yellow]üóëÔ∏è X√≥a giao d·ªãch g·∫ßn nh·∫•t...[/yellow]")
    else:
        console.print(f"[yellow]üóëÔ∏è ƒêang x√≥a: {delete_query}[/yellow]")
    
    # Process the delete request
    result = tracker.process_user_message(delete_query)
    
    if result['success']:
        # Show success message
        message = result['message']
        console.print(f"[green]‚úÖ {message}[/green]")
        
        # Show updated statistics if available
        if 'statistics' in result:
            stats = result['statistics']
            
            stats_table = Table(show_header=False, box=box.SIMPLE, border_style="red")
            stats_table.add_column("", style="red", width=20)
            stats_table.add_column("", style="yellow", justify="right", width=15)
            
            stats_table.add_row("üóëÔ∏è ƒê√£ x√≥a", f"{stats['deleted_amount']:,.0f}ƒë")
            stats_table.add_row("üìÖ H√¥m nay c√≤n", f"{stats['today_total']:,.0f}ƒë ({stats['today_count']} l·∫ßn)")
            stats_table.add_row("üìÜ Tu·∫ßn n√†y c√≤n", f"{stats['week_total']:,.0f}ƒë ({stats['week_count']} l·∫ßn)")
            
            console.print(Panel(stats_table, title="üóëÔ∏è Th·ªëng k√™ sau khi x√≥a", border_style="red"))
        
        # Show deleted transaction info if available
        if 'deleted_transaction' in result:
            deleted = result['deleted_transaction']
            console.print(f"[dim]üóëÔ∏è ƒê√£ x√≥a: {deleted['food_item']} - {deleted['price']:,.0f}ƒë ({deleted.get('meal_time', 'N/A')})[/dim]")
        
        # Show sync/note info
        if result.get('note'):
            console.print(f"[yellow]üí° {result['note']}[/yellow]")
        elif result.get('offline_mode', False):
            console.print("[dim]üî¥ Offline mode - Ch∆∞a sync[/dim]")
            
    else:
        # Show error
        console.print(f"[red]‚ùå {result['message']}[/red]")
        if 'suggestion' in result:
            console.print(f"[yellow]üí° {result['suggestion']}[/yellow]")
        
        # Show offline warning if applicable
        if result.get('offline_mode', False):
            console.print("[red]üî¥ Ch·∫ø ƒë·ªô offline - Vui l√≤ng nh·∫≠p r√µ r√†ng h∆°n[/red]")


def quick_add_expense(expense_text: str):
    """Th√™m expense nhanh t·ª´ command line"""
    console = Console()
    tracker = ExpenseTracker()
    
    console.print(f"[yellow]üîÑ ƒêang th√™m: {expense_text}[/yellow]")
    
    # Process the expense
    result = tracker.process_user_message(expense_text)
    
    if result['success']:
        # Show success message
        message = result['message']
        if result.get('synced_to_sheets', False):
            message += " üìã"
        console.print(f"[green]‚úÖ {message}[/green]")
        
        # Show quick statistics if available
        if 'statistics' in result:
            stats = result['statistics']
            
            stats_table = Table(show_header=False, box=box.SIMPLE, border_style="cyan")
            stats_table.add_column("", style="cyan", width=20)
            stats_table.add_column("", style="yellow", justify="right", width=15)
            
            stats_table.add_row("üéØ Giao d·ªãch n√†y", f"{stats['this_transaction']:,.0f}ƒë")
            stats_table.add_row("üìÖ H√¥m nay", f"{stats['today_total']:,.0f}ƒë ({stats['today_count']} l·∫ßn)")
            stats_table.add_row("üìÜ Tu·∫ßn n√†y", f"{stats['week_total']:,.0f}ƒë ({stats['week_count']} l·∫ßn)")
            
            console.print(Panel(stats_table, title="üìä Th·ªëng k√™ nhanh", border_style="cyan"))
        
        # Show sync info
        if result.get('synced_to_sheets', False):
            console.print("[dim]üìã ƒê√£ sync l√™n Google Sheets[/dim]")
        elif result.get('offline_mode', False):
            console.print("[dim]üî¥ Offline mode - Ch∆∞a sync[/dim]")
            
    else:
        # Show error
        console.print(f"[red]‚ùå {result['message']}[/red]")
        if 'suggestion' in result:
            console.print(f"[yellow]üí° {result['suggestion']}[/yellow]")
        
        # Show offline warning if applicable
        if result.get('offline_mode', False):
            console.print("[red]üî¥ Ch·∫ø ƒë·ªô offline - Vui l√≤ng nh·∫≠p r√µ r√†ng h∆°n[/red]")


def show_statistics(period: str):
    """Hi·ªÉn th·ªã th·ªëng k√™ nhanh"""
    console = Console()
    tracker = ExpenseTracker()
    
    # Map period to days and message
    period_config = {
        'daily': {'days': 1, 'title': 'H√îM NAY', 'emoji': 'üìÖ'},
        'weekly': {'days': 7, 'title': 'TU·∫¶N N√ÄY', 'emoji': 'üìÜ'}, 
        'monthly': {'days': 30, 'title': 'TH√ÅNG N√ÄY', 'emoji': 'üìä'}
    }
    
    config = period_config[period]
    console.print(f"[yellow]üîç L·∫•y th·ªëng k√™ {config['title'].lower()}...[/yellow]")
    
    # Get statistics
    summary = tracker.db.get_spending_summary(tracker.current_user_id, config['days'])
    recent_transactions = tracker.db.get_recent_transactions(tracker.current_user_id, 5)
    balance = tracker.get_balance_summary()
    
    # Create main statistics table
    stats_table = Table(show_header=True, header_style="bold cyan", box=box.DOUBLE)
    stats_table.add_column(f"{config['emoji']} Th·ªëng k√™", style="cyan", width=25)
    stats_table.add_column("Gi√° tr·ªã", style="green", justify="right", width=20)
    
    stats_table.add_row("üìÖ Th·ªùi gian", config['title'])
    stats_table.add_row("üí∏ T·ªïng chi ti√™u", f"{summary['total_spent'] or 0:,.0f}ƒë")
    stats_table.add_row("üî¢ S·ªë giao d·ªãch", f"{summary['transaction_count']} l·∫ßn")
    
    if summary['transaction_count'] > 0:
        stats_table.add_row("üìä Trung b√¨nh/l·∫ßn", f"{summary['avg_spent'] or 0:,.0f}ƒë")
        stats_table.add_row("üìâ Th·∫•p nh·∫•t", f"{summary['min_spent'] or 0:,.0f}ƒë")
        stats_table.add_row("üìà Cao nh·∫•t", f"{summary['max_spent'] or 0:,.0f}ƒë")
    
    console.print(Panel(stats_table, title=f"üìä TH·ªêNG K√ä {config['title']}", border_style="cyan"))
    
    # Show balance
    balance_table = Table(show_header=False, box=box.SIMPLE, border_style="green")
    balance_table.add_column("", style="green", width=20)
    balance_table.add_column("", style="yellow", justify="right", width=15)
    
    balance_table.add_row("üíµ Ti·ªÅn m·∫∑t", f"{balance['cash_balance']:,.0f}ƒë")
    balance_table.add_row("üè¶ T√†i kho·∫£n", f"{balance['account_balance']:,.0f}ƒë")
    balance_table.add_row("üí∞ T·ªïng c·ªông", f"[bold]{balance['total_balance']:,.0f}ƒë[/bold]")
    
    console.print(Panel(balance_table, title="üí∞ S·ªê D∆Ø HI·ªÜN T·∫†I", border_style="green"))
    
    # Show recent transactions if any
    if recent_transactions and summary['transaction_count'] > 0:
        recent_table = Table(show_header=True, header_style="bold yellow", box=box.SIMPLE)
        recent_table.add_column("Ng√†y", style="yellow", width=12)
        recent_table.add_column("M√≥n", style="green", width=15)
        recent_table.add_column("Gi√°", style="cyan", justify="right", width=12)
        recent_table.add_column("B·ªØa", style="magenta", width=8)
        
        # Show max 3 recent transactions
        for trans in recent_transactions[:3]:
            recent_table.add_row(
                trans['transaction_date'],
                trans['food_item'],
                f"{trans['price']:,.0f}ƒë",
                trans['meal_time'] or ""
            )
        
        console.print(Panel(recent_table, title="üïê GIAO D·ªäCH G·∫¶N ƒê√ÇY", border_style="yellow"))


def main():
    """Main function v·ªõi CLI support"""
    parser = create_parser()
    args = parser.parse_args()
    
    # Handle CLI operations
    if args.append:
        quick_add_expense(args.append)
        return
    
    if args.delete:
        quick_delete_transaction(args.delete)
        return
    
    if args.stats_daily:
        show_statistics('daily')
        return
        
    if args.stats_weekly:
        show_statistics('weekly')
        return
        
    if args.stats_monthly:
        show_statistics('monthly') 
        return
    
    # Default: Start interactive mode
    try:
        chatbot = ExpenseChatbot()
        chatbot.start()
    except KeyboardInterrupt:
        console = Console()
        console.print("\n[yellow]üëã ƒê√£ tho√°t ·ª©ng d·ª•ng![/yellow]")
        sys.exit(0)
    except Exception as e:
        console = Console()
        console.print(f"[red]‚ùå L·ªói: {str(e)}[/red]")
        sys.exit(1)


if __name__ == "__main__":
    main() 