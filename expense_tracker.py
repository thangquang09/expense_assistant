from typing import Dict, List, Any, Optional
from database import Database
from llm_processor import ExpenseExtractor, QueryAnalyzer
from google_sheets_sync import get_sheets_sync
import datetime


class ExpenseTracker:
    def __init__(self, db_path: str = "expense_tracker.db"):
        """Kh·ªüi t·∫°o expense tracker"""
        self.db = Database(db_path)
        self.llm_processor = ExpenseExtractor()
        self.query_analyzer = QueryAnalyzer()
        self.sheets_sync = get_sheets_sync()
        self.current_user_id = 1  # M·∫∑c ƒë·ªãnh user ƒë·∫ßu ti√™n
        
        # Auto sync if enabled
        if self.sheets_sync.enabled:
            print("üîó Google Sheets sync ƒë∆∞·ª£c k√≠ch ho·∫°t")
    
    def process_user_message(self, message: str) -> Dict[str, Any]:
        """
        X·ª≠ l√Ω tin nh·∫Øn t·ª´ ng∆∞·ªùi d√πng
        Returns: Dict ch·ª©a k·∫øt qu·∫£ x·ª≠ l√Ω v√† th√¥ng tin ph·∫£n h·ªìi
        """
        
        # B∆∞·ªõc 1: Ph√¢n t√≠ch intent
        intent_result = self.query_analyzer.analyze_intent(message)
        
        # Check offline mode
        offline_mode = intent_result.get('offline_mode', False)
        
        if intent_result['confidence'] < 0.3:  # Gi·∫£m threshold cho offline mode
            suggestion = "Vui l√≤ng th·ª≠ l·∫°i v·ªõi: 'ƒÉn/u·ªëng [m√≥n] [gi√°]' ho·∫∑c 'x√≥a [m√≥n]'"
            if offline_mode:
                suggestion += "\nüî¥ Ch·∫ø ƒë·ªô offline: Vui l√≤ng nh·∫≠p r√µ r√†ng h∆°n"
            
            return {
                'success': False,
                'message': f"Kh√¥ng hi·ªÉu r√µ √Ω ƒë·ªãnh c·ªßa b·∫°n. {intent_result['analysis']}",
                'suggestion': suggestion,
                'offline_mode': offline_mode
            }
        
        # B∆∞·ªõc 2: X·ª≠ l√Ω theo intent
        intent = intent_result['intent']
        
        result = None
        if intent == 'add_expense':
            result = self._handle_expense_entry(message)
        elif intent == 'delete_expense':
            result = self._handle_expense_deletion(message)
        elif intent == 'update_balance':
            balance_update = self.llm_processor.process_balance_update(message)
            if balance_update:
                result = self._handle_balance_update(balance_update)
            else:
                result = {
                    'success': False,
                    'message': 'Kh√¥ng th·ªÉ x·ª≠ l√Ω l·ªánh c·∫≠p nh·∫≠t s·ªë d∆∞'
                }
        elif intent == 'view_statistics':
            result = self._handle_statistics_request(message)
        else:
            suggestion = "Th·ª≠: 'ƒÉn ph·ªü 30k', 'x√≥a ph·ªü', 'th·ªëng k√™ h√¥m nay'"
            if offline_mode:
                suggestion += "\nüî¥ Ch·∫ø ƒë·ªô offline: Nh·∫≠p ch√≠nh x√°c h∆°n"
            
            result = {
                'success': False,
                'message': f"Ch∆∞a h·ªó tr·ª£ lo·∫°i y√™u c·∫ßu n√†y: {intent_result['analysis']}",
                'suggestion': suggestion
            }
        
        # Th√™m th√¥ng tin offline mode v√†o result
        if result and offline_mode:
            result['offline_mode'] = True
            if result.get('success', False):
                result['message'] = f"üî¥ {result['message']} (offline mode)"
        
        return result
    
    def _handle_expense_entry(self, message: str) -> Dict[str, Any]:
        """X·ª≠ l√Ω vi·ªác th√™m chi ti√™u"""
        try:
            # Tr√≠ch xu·∫•t th√¥ng tin t·ª´ LLM
            expense_info = self.llm_processor.extract_expense_info(message)
            
            # ƒêi·ªÅu ch·ªânh threshold d·ª±a tr√™n ch·∫ø ƒë·ªô offline
            min_confidence = 0.25 if expense_info.get('offline_mode', False) else 0.4
            
            if expense_info['confidence'] < min_confidence:
                return {
                    'success': False,
                    'message': f"Kh√¥ng th·ªÉ hi·ªÉu r√µ th√¥ng tin chi ti√™u. ƒê·ªô tin c·∫≠y: {expense_info['confidence']:.2f}",
                    'suggestion': "Vui l√≤ng th·ª≠ l·∫°i v·ªõi format: '[th·ªùi gian] ƒÉn/u·ªëng [m√≥n] [gi√°]' (VD: 'tr∆∞a ƒÉn ph·ªü 35k')"
                }
            
            # Th√™m v√†o database (ch·ªâ ƒë·ªÉ th·ªëng k√™)
            transaction_id = self.db.add_transaction(
                user_id=self.current_user_id,
                food_item=expense_info['food_item'],
                price=expense_info['price'],
                meal_time=expense_info['meal_time']
            )
            
            # L·∫•y th·ªëng k√™ nhanh
            today_summary = self.db.get_spending_summary(self.current_user_id, 1)  # H√¥m nay
            week_summary = self.db.get_spending_summary(self.current_user_id, 7)   # Tu·∫ßn n√†y
            
            # Auto sync to Google Sheets n·∫øu enabled
            if self.sheets_sync.enabled:
                try:
                    # Sync transaction v·ª´a t·∫°o
                    new_transaction = {
                        'id': transaction_id,
                        'food_item': expense_info['food_item'],
                        'price': expense_info['price'],
                        'meal_time': expense_info['meal_time'],
                        'transaction_date': datetime.date.today().isoformat(),
                        'transaction_time': datetime.datetime.now().time().isoformat(),
                        'created_at': datetime.datetime.now().isoformat()
                    }
                    self.sheets_sync.sync_transactions([new_transaction])
                except Exception as e:
                    print(f"‚ö†Ô∏è L·ªói sync to Sheets: {e}")
            
            return {
                'success': True,
                'transaction_id': transaction_id,
                'message': f"‚úÖ ƒê√£ ghi nh·∫≠n: {expense_info['food_item']} - {expense_info['price']:,.0f}ƒë",
                'expense_info': expense_info,
                'statistics': {
                    'today_total': today_summary['total_spent'] or 0,
                    'today_count': today_summary['transaction_count'],
                    'week_total': week_summary['total_spent'] or 0,
                    'week_count': week_summary['transaction_count'],
                    'this_transaction': expense_info['price']
                },
                'synced_to_sheets': self.sheets_sync.enabled
            }
            
        except Exception as e:
            return {
                'success': False,
                'message': f"L·ªói x·ª≠ l√Ω: {str(e)}",
                'error': str(e)
            }
    
    def _handle_balance_update(self, balance_update: Dict[str, float]) -> Dict[str, Any]:
        """X·ª≠ l√Ω vi·ªác c·∫≠p nh·∫≠t s·ªë d∆∞"""
        try:
            success = self.db.update_user_balance(
                user_id=self.current_user_id,
                cash_balance=balance_update.get('cash_balance'),
                account_balance=balance_update.get('account_balance')
            )
            
            if success:
                current_balance = self.db.get_user_balance(self.current_user_id)
                
                # Auto sync balance to Google Sheets
                if self.sheets_sync.enabled:
                    try:
                        self.sheets_sync.sync_balance(current_balance)
                    except Exception as e:
                        print(f"‚ö†Ô∏è L·ªói sync balance to Sheets: {e}")
                
                return {
                    'success': True,
                    'message': "‚úÖ ƒê√£ c·∫≠p nh·∫≠t s·ªë d∆∞",
                    'balance': current_balance,
                    'updated_fields': balance_update,
                    'synced_to_sheets': self.sheets_sync.enabled
                }
            else:
                return {
                    'success': False,
                    'message': "‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t s·ªë d∆∞"
                }
                
        except Exception as e:
            return {
                'success': False,
                'message': f"L·ªói c·∫≠p nh·∫≠t s·ªë d∆∞: {str(e)}"
            }
    
    def _handle_expense_deletion(self, message: str) -> Dict[str, Any]:
        """X·ª≠ l√Ω vi·ªác x√≥a giao d·ªãch"""
        try:
            # Tr√≠ch xu·∫•t th√¥ng tin giao d·ªãch c·∫ßn x√≥a
            delete_info = self.llm_processor.extract_delete_info(message)
            
            if delete_info['confidence'] < 0.4:
                return {
                    'success': False,
                    'message': f"Kh√¥ng th·ªÉ hi·ªÉu r√µ giao d·ªãch c·∫ßn x√≥a. ƒê·ªô tin c·∫≠y: {delete_info['confidence']:.2f}",
                    'suggestion': "Vui l√≤ng th·ª≠: 'x√≥a [m√≥n ƒÉn]' ho·∫∑c 'x√≥a [m√≥n ƒÉn] [gi√°]'"
                }
            
            # X√≥a giao d·ªãch t·ª´ database
            delete_result = self.db.delete_transaction_by_criteria(
                user_id=self.current_user_id,
                food_item=delete_info['food_item'],
                price=delete_info['price'],
                meal_time=delete_info['meal_time']
            )
            
            if delete_result['success']:
                # L·∫•y th·ªëng k√™ sau khi x√≥a
                today_summary = self.db.get_spending_summary(self.current_user_id, 1)
                week_summary = self.db.get_spending_summary(self.current_user_id, 7)
                
                # Note: Kh√¥ng auto sync deletion to Sheets v√¨ c√≥ th·ªÉ ph·ª©c t·∫°p
                # User c√≥ th·ªÉ manually export l·∫°i n·∫øu c·∫ßn
                
                return {
                    'success': True,
                    'message': f"üóëÔ∏è {delete_result['message']}",
                    'deleted_info': delete_info,
                    'deleted_transaction': delete_result['deleted_transaction'],
                    'statistics': {
                        'today_total': today_summary['total_spent'] or 0,
                        'today_count': today_summary['transaction_count'],
                        'week_total': week_summary['total_spent'] or 0,
                        'week_count': week_summary['transaction_count'],
                        'deleted_amount': delete_result['deleted_transaction']['price']
                    },
                    'note': 'ƒê·ªÉ sync deletion l√™n Sheets, d√πng menu Export'
                }
            else:
                return {
                    'success': False,
                    'message': f"‚ùå {delete_result['message']}",
                    'suggestion': "Ki·ªÉm tra l·∫°i t√™n m√≥n ƒÉn ho·∫∑c xem danh s√°ch giao d·ªãch g·∫ßn ƒë√¢y"
                }
                
        except Exception as e:
            return {
                'success': False,
                'message': f"L·ªói x·ª≠ l√Ω x√≥a giao d·ªãch: {str(e)}",
                'error': str(e)
            }
    
    def _handle_statistics_request(self, message: str) -> Dict[str, Any]:
        """X·ª≠ l√Ω y√™u c·∫ßu xem th·ªëng k√™"""
        try:
            # Tr√≠ch xu·∫•t th√¥ng tin th·ªëng k√™
            stats_info = self.llm_processor.extract_statistics_info(message)
            
            if stats_info['confidence'] < 0.4:
                return {
                    'success': False,
                    'message': f"Kh√¥ng hi·ªÉu r√µ y√™u c·∫ßu th·ªëng k√™. ƒê·ªô tin c·∫≠y: {stats_info['confidence']:.2f}",
                    'suggestion': "Th·ª≠: 'th·ªëng k√™ h√¥m nay', 'chi ti√™u tu·∫ßn n√†y', 'b√°o c√°o 5 ng√†y'"
                }
            
            # L·∫•y d·ªØ li·ªáu th·ªëng k√™
            days = stats_info['days']
            summary = self.db.get_spending_summary(self.current_user_id, days)
            recent_transactions = self.db.get_recent_transactions(self.current_user_id, 5)
            
            # Auto sync statistics to Sheets n·∫øu enabled
            if self.sheets_sync.enabled:
                try:
                    stats_data = summary.copy()
                    stats_data['days'] = days
                    self.sheets_sync.sync_statistics(stats_data)
                except Exception as e:
                    print(f"‚ö†Ô∏è L·ªói sync statistics to Sheets: {e}")
            
            # T·∫°o th√¥ng ƒëi·ªáp ph√π h·ª£p
            period_text = {
                'today': 'h√¥m nay',
                'week': 'tu·∫ßn n√†y', 
                'month': 'th√°ng n√†y',
                'custom': f'{days} ng√†y qua'
            }.get(stats_info['period'], f'{days} ng√†y')
            
            return {
                'success': True,
                'message': f"üìä Th·ªëng k√™ chi ti√™u {period_text}",
                'statistics_detailed': {
                    'period': period_text,
                    'days': days,
                    'total_spent': summary['total_spent'] or 0,
                    'transaction_count': summary['transaction_count'],
                    'avg_spent': summary['avg_spent'] or 0,
                    'min_spent': summary['min_spent'] or 0,
                    'max_spent': summary['max_spent'] or 0,
                    'recent_transactions': recent_transactions[:3]  # Top 3 g·∫ßn nh·∫•t
                },
                'synced_to_sheets': self.sheets_sync.enabled
            }
            
        except Exception as e:
            return {
                'success': False,
                'message': f"L·ªói x·ª≠ l√Ω th·ªëng k√™: {str(e)}",
                'error': str(e)
            }
    
    def export_to_sheets(self) -> Dict[str, Any]:
        """Export to√†n b·ªô d·ªØ li·ªáu l√™n Google Sheets"""
        if not self.sheets_sync.enabled:
            return {
                'success': False,
                'message': 'Google Sheets sync ch∆∞a ƒë∆∞·ª£c k√≠ch ho·∫°t',
                'suggestion': 'Setup credentials.json ƒë·ªÉ k√≠ch ho·∫°t'
            }
        
        try:
            success = self.sheets_sync.export_full_data(self.db)
            if success:
                url = self.sheets_sync.get_spreadsheet_url()
                return {
                    'success': True,
                    'message': 'üéâ ƒê√£ export to√†n b·ªô d·ªØ li·ªáu l√™n Google Sheets',
                    'spreadsheet_url': url
                }
            else:
                return {
                    'success': False,
                    'message': 'L·ªói khi export d·ªØ li·ªáu'
                }
                
        except Exception as e:
            return {
                'success': False,
                'message': f"L·ªói export: {str(e)}"
            }
    
    def get_balance_summary(self) -> Dict[str, Any]:
        """L·∫•y t·ªïng quan s·ªë d∆∞"""
        balance = self.db.get_user_balance(self.current_user_id)
        return {
            'cash_balance': balance['cash_balance'],
            'account_balance': balance['account_balance'],
            'total_balance': balance['cash_balance'] + balance['account_balance']
        }
    
    def get_spending_report(self, days: int = 7) -> Dict[str, Any]:
        """L·∫•y b√°o c√°o chi ti√™u"""
        summary = self.db.get_spending_summary(self.current_user_id, days)
        recent_transactions = self.db.get_recent_transactions(self.current_user_id, 10)
        
        return {
            'period_days': days,
            'summary': summary,
            'recent_transactions': recent_transactions,
            'balance': self.get_balance_summary()
        }
    
    def get_recent_transactions(self, limit: int = 10) -> List[Dict[str, Any]]:
        """L·∫•y giao d·ªãch g·∫ßn ƒë√¢y"""
        return self.db.get_recent_transactions(self.current_user_id, limit) 